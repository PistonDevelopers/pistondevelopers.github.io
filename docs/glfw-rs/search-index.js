var searchIndex = {};
searchIndex['glfw'] = {"items":[[0,"","glfw","An ideomatic wrapper for the GLFW library."],[1,"ShowAliases","","Formats the type using aliases rather than the default variant names."],[1,"Callback","",""],[11,"f","","",0],[11,"data","","",0],[1,"VidMode","","Describes a single video mode."],[11,"width","","",1],[11,"height","","",1],[11,"red_bits","","",1],[11,"green_bits","","",1],[11,"blue_bits","","",1],[11,"refresh_rate","","",1],[1,"GammaRamp","","Describes the gamma ramp of a monitor."],[11,"red","","",2],[11,"green","","",2],[11,"blue","","",2],[1,"Glfw","","A token from which to call various GLFW functions. It can be obtained by\ncalling the `init` function. This cannot be sent to other tasks, and should\nonly be initialized on the main platform thread. Whilst this might make\nperforming some operations harder, this is to ensure thread safety is enforced\nstatically. The context can be safely cloned or implicitly copied if need be\nfor convenience."],[1,"Monitor","","A struct that wraps a `*GLFWmonitor` handle."],[1,"Modifiers","","Key modifiers"],[1,"FlushedMessages","","An iterator that yeilds until no more messages are contained in the\n`Receiver`'s queue."],[1,"Window","","A struct that wraps a `*GLFWwindow` handle."],[11,"ptr","","",3],[11,"glfw","","",3],[11,"is_shared","","",3],[1,"RenderContext","","A rendering context that can be shared between tasks."],[1,"Joystick","","A joystick handle."],[11,"id","","",4],[11,"glfw","","",4],[2,"Action","","Input actions."],[12,"Release","","",5],[12,"Press","","",5],[12,"Repeat","","",5],[2,"Key","","Input keys."],[12,"KeySpace","","",6],[12,"KeyApostrophe","","",6],[12,"KeyComma","","",6],[12,"KeyMinus","","",6],[12,"KeyPeriod","","",6],[12,"KeySlash","","",6],[12,"Key0","","",6],[12,"Key1","","",6],[12,"Key2","","",6],[12,"Key3","","",6],[12,"Key4","","",6],[12,"Key5","","",6],[12,"Key6","","",6],[12,"Key7","","",6],[12,"Key8","","",6],[12,"Key9","","",6],[12,"KeySemicolon","","",6],[12,"KeyEqual","","",6],[12,"KeyA","","",6],[12,"KeyB","","",6],[12,"KeyC","","",6],[12,"KeyD","","",6],[12,"KeyE","","",6],[12,"KeyF","","",6],[12,"KeyG","","",6],[12,"KeyH","","",6],[12,"KeyI","","",6],[12,"KeyJ","","",6],[12,"KeyK","","",6],[12,"KeyL","","",6],[12,"KeyM","","",6],[12,"KeyN","","",6],[12,"KeyO","","",6],[12,"KeyP","","",6],[12,"KeyQ","","",6],[12,"KeyR","","",6],[12,"KeyS","","",6],[12,"KeyT","","",6],[12,"KeyU","","",6],[12,"KeyV","","",6],[12,"KeyW","","",6],[12,"KeyX","","",6],[12,"KeyY","","",6],[12,"KeyZ","","",6],[12,"KeyLeftBracket","","",6],[12,"KeyBackslash","","",6],[12,"KeyRightBracket","","",6],[12,"KeyGraveAccent","","",6],[12,"KeyWorld1","","",6],[12,"KeyWorld2","","",6],[12,"KeyEscape","","",6],[12,"KeyEnter","","",6],[12,"KeyTab","","",6],[12,"KeyBackspace","","",6],[12,"KeyInsert","","",6],[12,"KeyDelete","","",6],[12,"KeyRight","","",6],[12,"KeyLeft","","",6],[12,"KeyDown","","",6],[12,"KeyUp","","",6],[12,"KeyPageUp","","",6],[12,"KeyPageDown","","",6],[12,"KeyHome","","",6],[12,"KeyEnd","","",6],[12,"KeyCapsLock","","",6],[12,"KeyScrollLock","","",6],[12,"KeyNumLock","","",6],[12,"KeyPrintScreen","","",6],[12,"KeyPause","","",6],[12,"KeyF1","","",6],[12,"KeyF2","","",6],[12,"KeyF3","","",6],[12,"KeyF4","","",6],[12,"KeyF5","","",6],[12,"KeyF6","","",6],[12,"KeyF7","","",6],[12,"KeyF8","","",6],[12,"KeyF9","","",6],[12,"KeyF10","","",6],[12,"KeyF11","","",6],[12,"KeyF12","","",6],[12,"KeyF13","","",6],[12,"KeyF14","","",6],[12,"KeyF15","","",6],[12,"KeyF16","","",6],[12,"KeyF17","","",6],[12,"KeyF18","","",6],[12,"KeyF19","","",6],[12,"KeyF20","","",6],[12,"KeyF21","","",6],[12,"KeyF22","","",6],[12,"KeyF23","","",6],[12,"KeyF24","","",6],[12,"KeyF25","","",6],[12,"KeyKp0","","",6],[12,"KeyKp1","","",6],[12,"KeyKp2","","",6],[12,"KeyKp3","","",6],[12,"KeyKp4","","",6],[12,"KeyKp5","","",6],[12,"KeyKp6","","",6],[12,"KeyKp7","","",6],[12,"KeyKp8","","",6],[12,"KeyKp9","","",6],[12,"KeyKpDecimal","","",6],[12,"KeyKpDivide","","",6],[12,"KeyKpMultiply","","",6],[12,"KeyKpSubtract","","",6],[12,"KeyKpAdd","","",6],[12,"KeyKpEnter","","",6],[12,"KeyKpEqual","","",6],[12,"KeyLeftShift","","",6],[12,"KeyLeftControl","","",6],[12,"KeyLeftAlt","","",6],[12,"KeyLeftSuper","","",6],[12,"KeyRightShift","","",6],[12,"KeyRightControl","","",6],[12,"KeyRightAlt","","",6],[12,"KeyRightSuper","","",6],[12,"KeyMenu","","",6],[2,"MouseButton","","Mouse buttons. The `MouseButtonLeft`, `MouseButtonRight`, and\n`MouseButtonMiddle` aliases are supplied for convenience."],[12,"MouseButton1","","The left mouse button. A `MouseButtonLeft` alias is provided to improve clarity.",7],[12,"MouseButton2","","The right mouse button. A `MouseButtonRight` alias is provided to improve clarity.",7],[12,"MouseButton3","","The middle mouse button. A `MouseButtonMiddle` alias is provided to improve clarity.",7],[12,"MouseButton4","","",7],[12,"MouseButton5","","",7],[12,"MouseButton6","","",7],[12,"MouseButton7","","",7],[12,"MouseButton8","","",7],[2,"Error","","Tokens corresponding to various error types."],[12,"NotInitialized","","",8],[12,"NoCurrentContext","","",8],[12,"InvalidEnum","","",8],[12,"InvalidValue","","",8],[12,"OutOfMemory","","",8],[12,"ApiUnavailable","","",8],[12,"VersionUnavailable","","",8],[12,"PlatformError","","",8],[12,"FormatUnavailable","","",8],[2,"CursorMode","","Cursor modes."],[12,"CursorNormal","","",9],[12,"CursorHidden","","",9],[12,"CursorDisabled","","",9],[2,"InitError","","An error that might be returned when `glfw::init` is called."],[12,"AlreadyInitialized","","The library was already initialized.",10],[12,"InternalInitError","","An internal error occured when trying to initialize the library.",10],[2,"MonitorEvent","","Monitor events."],[12,"Connected","","",11],[12,"Disconnected","","",11],[2,"WindowHint","","Window hints that can be set using the `window_hint` function."],[12,"RedBits","","Specifies the desired bit depth of the red component of the default framebuffer.",12],[12,"GreenBits","","Specifies the desired bit depth of the green component of the default framebuffer.",12],[12,"BlueBits","","Specifies the desired bit depth of the blue component of the default framebuffer.",12],[12,"AlphaBits","","Specifies the desired bit depth of the alpha component of the default framebuffer.",12],[12,"DepthBits","","Specifies the desired bit depth of the depth component of the default framebuffer.",12],[12,"StencilBits","","Specifies the desired bit depth of the stencil component of the default framebuffer.",12],[12,"AccumRedBits","","Specifies the desired bit depth of the red component of the accumulation framebuffer.",12],[12,"AccumGreenBits","","Specifies the desired bit depth of the green component of the accumulation framebuffer.",12],[12,"AccumBlueBits","","Specifies the desired bit depth of the blue component of the accumulation framebuffer.",12],[12,"AccumAlphaBits","","Specifies the desired bit depth of the alpha component of the accumulation framebuffer.",12],[12,"AuxBuffers","","Specifies the desired number of auxiliary buffers.",12],[12,"Stereo","","Specifies whether to use stereoscopic rendering.",12],[12,"Samples","","Specifies the desired number of samples to use for multisampling. Zero\ndisables multisampling.",12],[12,"SRgbCapable","","Specifies whether the framebuffer should be sRGB capable.",12],[12,"RefreshRate","","Specifies the desired refresh rate for full screen windows. If set to\nzero, the highest available refresh rate will be used.",12],[12,"ClientApi","","Specifies which `ClientApi` to create the context for.",12],[12,"ContextVersionMajor","","Specifies the major client API version that the created context must be\ncompatible with.",12],[12,"ContextVersionMinor","","Specifies the minor client API version that the created context must be\ncompatible with.",12],[12,"ContextVersion","","Specifies the client API version that the created context must be\ncompatible with. This is the same as successive calls to `window_hint`\nfunction with the `ContextVersionMajor` and `ContextVersionMinor` hints.",12],[12,"ContextRobustness","","Specifies the `ContextRobustness` strategy to be used.",12],[12,"OpenglForwardCompat","","Specifies whether the OpenGL context should be forward-compatible, i.e.\none where all functionality deprecated in the requested version of\nOpenGL is removed. This may only be used if the requested OpenGL version\nis 3.0 or above.",12],[12,"OpenglDebugContext","","Specifies whether to create a debug OpenGL context, which may have\nadditional error and performance issue reporting functionality.",12],[12,"OpenglProfile","","Specifies which OpenGL profile to create the context for. If requesting\nan OpenGL version below 3.2, `OpenGlAnyProfile` must be used.",12],[12,"Resizable","","Specifies whether the window will be resizable by the user. Even if this\nis set to `false`, the window can still be resized using the\n`Window::set_size` function.",12],[12,"Visible","","Specifies whether the window will be visible on creation.",12],[12,"Decorated","","Specifies whether the window will have platform-specific decorations\nsuch as a border, a close widget, etc.",12],[2,"ClientApi","","Client API tokens."],[12,"OpenGlApi","","",13],[12,"OpenGlEsApi","","",13],[2,"ContextRobustness","","Context robustness tokens."],[12,"NoRobustness","","",14],[12,"NoResetNotification","","",14],[12,"LoseContextOnReset","","",14],[2,"OpenGlProfile","","OpenGL profile tokens."],[12,"OpenGlAnyProfile","","",15],[12,"OpenGlCoreProfile","","",15],[12,"OpenGlCompatProfile","","",15],[2,"WindowMode","","Describes the mode of a window"],[12,"FullScreen","","Full screen mode. Contains the monitor on which the window is displayed.",16],[12,"Windowed","","Windowed mode.",16],[2,"WindowEvent","","Window event messages."],[12,"PosEvent","","",17],[12,"SizeEvent","","",17],[12,"CloseEvent","","",17],[12,"RefreshEvent","","",17],[12,"FocusEvent","","",17],[12,"IconifyEvent","","",17],[12,"FramebufferSizeEvent","","",17],[12,"MouseButtonEvent","","",17],[12,"CursorPosEvent","","",17],[12,"CursorEnterEvent","","",17],[12,"ScrollEvent","","",17],[12,"KeyEvent","","",17],[12,"CharEvent","","",17],[2,"JoystickId","","Joystick identifier tokens."],[12,"Joystick1","","",18],[12,"Joystick2","","",18],[12,"Joystick3","","",18],[12,"Joystick4","","",18],[12,"Joystick5","","",18],[12,"Joystick6","","",18],[12,"Joystick7","","",18],[12,"Joystick8","","",18],[12,"Joystick9","","",18],[12,"Joystick10","","",18],[12,"Joystick11","","",18],[12,"Joystick12","","",18],[12,"Joystick13","","",18],[12,"Joystick14","","",18],[12,"Joystick15","","",18],[12,"Joystick16","","",18],[3,"fail_on_errors","","The function to be used with the `FAIL_ON_ERRORS` callback."],[3,"log_errors","","The function to be used with the `LOG_ERRORS` callback."],[3,"init","","Initializes the GLFW library. This must be called on the main platform\nthread."],[3,"get_version","","Wrapper for `glfwGetVersion`."],[3,"get_version_string","","Wrapper for `glfwGetVersionString`."],[3,"flush_messages","","Returns an iterator that yeilds until no more messages are contained in the\n`Receiver`'s queue. This is useful for event handling where the blocking\nbehaviour of `Receiver::iter` is undesirable."],[3,"make_context_current","","Wrapper for `glfwMakeContextCurrent`."],[0,"ffi","","Low-level function bindings and constants pertaining to the underlying\nGLFW library."],[1,"GLFWgammaramp","glfw::ffi",""],[11,"red","","",19],[11,"green","","",19],[11,"blue","","",19],[11,"size","","",19],[1,"GLFWvidmode","",""],[11,"width","","",20],[11,"height","","",20],[11,"redBits","","",20],[11,"greenBits","","",20],[11,"blueBits","","",20],[11,"refreshRate","","",20],[2,"GLFWmonitor","",""],[2,"GLFWwindow","",""],[13,"glfwInit","",""],[13,"glfwTerminate","",""],[13,"glfwGetVersion","",""],[13,"glfwGetVersionString","",""],[13,"glfwSetErrorCallback","",""],[13,"glfwGetMonitors","",""],[13,"glfwGetPrimaryMonitor","",""],[13,"glfwGetMonitorPos","",""],[13,"glfwGetMonitorPhysicalSize","",""],[13,"glfwGetMonitorName","",""],[13,"glfwSetMonitorCallback","",""],[13,"glfwGetVideoModes","",""],[13,"glfwGetVideoMode","",""],[13,"glfwSetGamma","",""],[13,"glfwGetGammaRamp","",""],[13,"glfwSetGammaRamp","",""],[13,"glfwDefaultWindowHints","",""],[13,"glfwWindowHint","",""],[13,"glfwCreateWindow","",""],[13,"glfwDestroyWindow","",""],[13,"glfwWindowShouldClose","",""],[13,"glfwSetWindowShouldClose","",""],[13,"glfwSetWindowTitle","",""],[13,"glfwGetWindowPos","",""],[13,"glfwSetWindowPos","",""],[13,"glfwGetWindowSize","",""],[13,"glfwSetWindowSize","",""],[13,"glfwGetFramebufferSize","",""],[13,"glfwIconifyWindow","",""],[13,"glfwRestoreWindow","",""],[13,"glfwShowWindow","",""],[13,"glfwHideWindow","",""],[13,"glfwGetWindowMonitor","",""],[13,"glfwGetWindowAttrib","",""],[13,"glfwSetWindowUserPointer","",""],[13,"glfwGetWindowUserPointer","",""],[13,"glfwSetWindowPosCallback","",""],[13,"glfwSetWindowSizeCallback","",""],[13,"glfwSetWindowCloseCallback","",""],[13,"glfwSetWindowRefreshCallback","",""],[13,"glfwSetWindowFocusCallback","",""],[13,"glfwSetWindowIconifyCallback","",""],[13,"glfwSetFramebufferSizeCallback","",""],[13,"glfwPollEvents","",""],[13,"glfwWaitEvents","",""],[13,"glfwGetInputMode","",""],[13,"glfwSetInputMode","",""],[13,"glfwGetKey","",""],[13,"glfwGetMouseButton","",""],[13,"glfwGetCursorPos","",""],[13,"glfwSetCursorPos","",""],[13,"glfwSetKeyCallback","",""],[13,"glfwSetCharCallback","",""],[13,"glfwSetMouseButtonCallback","",""],[13,"glfwSetCursorPosCallback","",""],[13,"glfwSetCursorEnterCallback","",""],[13,"glfwSetScrollCallback","",""],[13,"glfwJoystickPresent","",""],[13,"glfwGetJoystickAxes","",""],[13,"glfwGetJoystickButtons","",""],[13,"glfwGetJoystickName","",""],[13,"glfwSetClipboardString","",""],[13,"glfwGetClipboardString","",""],[13,"glfwGetTime","",""],[13,"glfwSetTime","",""],[13,"glfwMakeContextCurrent","",""],[13,"glfwGetCurrentContext","",""],[13,"glfwSwapBuffers","",""],[13,"glfwSwapInterval","",""],[13,"glfwExtensionSupported","",""],[13,"glfwGetProcAddress","",""],[13,"glfwGetCocoaWindow","",""],[13,"glfwGetNSGLContext","",""],[4,"GLFWglproc","",""],[4,"GLFWerrorfun","",""],[4,"GLFWwindowposfun","",""],[4,"GLFWwindowsizefun","",""],[4,"GLFWwindowclosefun","",""],[4,"GLFWwindowrefreshfun","",""],[4,"GLFWwindowfocusfun","",""],[4,"GLFWwindowiconifyfun","",""],[4,"GLFWframebuffersizefun","",""],[4,"GLFWmousebuttonfun","",""],[4,"GLFWcursorposfun","",""],[4,"GLFWcursorenterfun","",""],[4,"GLFWscrollfun","",""],[4,"GLFWkeyfun","",""],[4,"GLFWcharfun","",""],[4,"GLFWmonitorfun","",""],[5,"FALSE","",""],[5,"TRUE","",""],[5,"RELEASE","",""],[5,"PRESS","",""],[5,"REPEAT","",""],[5,"KEY_SPACE","",""],[5,"KEY_APOSTROPHE","",""],[5,"KEY_COMMA","",""],[5,"KEY_MINUS","",""],[5,"KEY_PERIOD","",""],[5,"KEY_SLASH","",""],[5,"KEY_0","",""],[5,"KEY_1","",""],[5,"KEY_2","",""],[5,"KEY_3","",""],[5,"KEY_4","",""],[5,"KEY_5","",""],[5,"KEY_6","",""],[5,"KEY_7","",""],[5,"KEY_8","",""],[5,"KEY_9","",""],[5,"KEY_SEMICOLON","",""],[5,"KEY_EQUAL","",""],[5,"KEY_A","",""],[5,"KEY_B","",""],[5,"KEY_C","",""],[5,"KEY_D","",""],[5,"KEY_E","",""],[5,"KEY_F","",""],[5,"KEY_G","",""],[5,"KEY_H","",""],[5,"KEY_I","",""],[5,"KEY_J","",""],[5,"KEY_K","",""],[5,"KEY_L","",""],[5,"KEY_M","",""],[5,"KEY_N","",""],[5,"KEY_O","",""],[5,"KEY_P","",""],[5,"KEY_Q","",""],[5,"KEY_R","",""],[5,"KEY_S","",""],[5,"KEY_T","",""],[5,"KEY_U","",""],[5,"KEY_V","",""],[5,"KEY_W","",""],[5,"KEY_X","",""],[5,"KEY_Y","",""],[5,"KEY_Z","",""],[5,"KEY_LEFT_BRACKET","",""],[5,"KEY_BACKSLASH","",""],[5,"KEY_RIGHT_BRACKET","",""],[5,"KEY_GRAVE_ACCENT","",""],[5,"KEY_WORLD_1","",""],[5,"KEY_WORLD_2","",""],[5,"KEY_ESCAPE","",""],[5,"KEY_ENTER","",""],[5,"KEY_TAB","",""],[5,"KEY_BACKSPACE","",""],[5,"KEY_INSERT","",""],[5,"KEY_DELETE","",""],[5,"KEY_RIGHT","",""],[5,"KEY_LEFT","",""],[5,"KEY_DOWN","",""],[5,"KEY_UP","",""],[5,"KEY_PAGE_UP","",""],[5,"KEY_PAGE_DOWN","",""],[5,"KEY_HOME","",""],[5,"KEY_END","",""],[5,"KEY_CAPS_LOCK","",""],[5,"KEY_SCROLL_LOCK","",""],[5,"KEY_NUM_LOCK","",""],[5,"KEY_PRINT_SCREEN","",""],[5,"KEY_PAUSE","",""],[5,"KEY_F1","",""],[5,"KEY_F2","",""],[5,"KEY_F3","",""],[5,"KEY_F4","",""],[5,"KEY_F5","",""],[5,"KEY_F6","",""],[5,"KEY_F7","",""],[5,"KEY_F8","",""],[5,"KEY_F9","",""],[5,"KEY_F10","",""],[5,"KEY_F11","",""],[5,"KEY_F12","",""],[5,"KEY_F13","",""],[5,"KEY_F14","",""],[5,"KEY_F15","",""],[5,"KEY_F16","",""],[5,"KEY_F17","",""],[5,"KEY_F18","",""],[5,"KEY_F19","",""],[5,"KEY_F20","",""],[5,"KEY_F21","",""],[5,"KEY_F22","",""],[5,"KEY_F23","",""],[5,"KEY_F24","",""],[5,"KEY_F25","",""],[5,"KEY_KP_0","",""],[5,"KEY_KP_1","",""],[5,"KEY_KP_2","",""],[5,"KEY_KP_3","",""],[5,"KEY_KP_4","",""],[5,"KEY_KP_5","",""],[5,"KEY_KP_6","",""],[5,"KEY_KP_7","",""],[5,"KEY_KP_8","",""],[5,"KEY_KP_9","",""],[5,"KEY_KP_DECIMAL","",""],[5,"KEY_KP_DIVIDE","",""],[5,"KEY_KP_MULTIPLY","",""],[5,"KEY_KP_SUBTRACT","",""],[5,"KEY_KP_ADD","",""],[5,"KEY_KP_ENTER","",""],[5,"KEY_KP_EQUAL","",""],[5,"KEY_LEFT_SHIFT","",""],[5,"KEY_LEFT_CONTROL","",""],[5,"KEY_LEFT_ALT","",""],[5,"KEY_LEFT_SUPER","",""],[5,"KEY_RIGHT_SHIFT","",""],[5,"KEY_RIGHT_CONTROL","",""],[5,"KEY_RIGHT_ALT","",""],[5,"KEY_RIGHT_SUPER","",""],[5,"KEY_MENU","",""],[5,"KEY_LAST","",""],[5,"MOD_SHIFT","",""],[5,"MOD_CONTROL","",""],[5,"MOD_ALT","",""],[5,"MOD_SUPER","",""],[5,"JOYSTICK_1","",""],[5,"JOYSTICK_2","",""],[5,"JOYSTICK_3","",""],[5,"JOYSTICK_4","",""],[5,"JOYSTICK_5","",""],[5,"JOYSTICK_6","",""],[5,"JOYSTICK_7","",""],[5,"JOYSTICK_8","",""],[5,"JOYSTICK_9","",""],[5,"JOYSTICK_10","",""],[5,"JOYSTICK_11","",""],[5,"JOYSTICK_12","",""],[5,"JOYSTICK_13","",""],[5,"JOYSTICK_14","",""],[5,"JOYSTICK_15","",""],[5,"JOYSTICK_16","",""],[5,"JOYSTICK_LAST","",""],[5,"MOUSE_BUTTON_1","",""],[5,"MOUSE_BUTTON_2","",""],[5,"MOUSE_BUTTON_3","",""],[5,"MOUSE_BUTTON_4","",""],[5,"MOUSE_BUTTON_5","",""],[5,"MOUSE_BUTTON_6","",""],[5,"MOUSE_BUTTON_7","",""],[5,"MOUSE_BUTTON_8","",""],[5,"MOUSE_BUTTON_LEFT","",""],[5,"MOUSE_BUTTON_RIGHT","",""],[5,"MOUSE_BUTTON_MIDDLE","",""],[5,"MOUSE_BUTTON_LAST","",""],[5,"NOT_INITIALIZED","",""],[5,"NO_CURRENT_CONTEXT","",""],[5,"INVALID_ENUM","",""],[5,"INVALID_VALUE","",""],[5,"OUT_OF_MEMORY","",""],[5,"API_UNAVAILABLE","",""],[5,"VERSION_UNAVAILABLE","",""],[5,"PLATFORM_ERROR","",""],[5,"FORMAT_UNAVAILABLE","",""],[5,"FOCUSED","",""],[5,"ICONIFIED","",""],[5,"RESIZABLE","",""],[5,"VISIBLE","",""],[5,"DECORATED","",""],[5,"RED_BITS","",""],[5,"GREEN_BITS","",""],[5,"BLUE_BITS","",""],[5,"ALPHA_BITS","",""],[5,"DEPTH_BITS","",""],[5,"STENCIL_BITS","",""],[5,"ACCUM_RED_BITS","",""],[5,"ACCUM_GREEN_BITS","",""],[5,"ACCUM_BLUE_BITS","",""],[5,"ACCUM_ALPHA_BITS","",""],[5,"AUX_BUFFERS","",""],[5,"STEREO","",""],[5,"SAMPLES","",""],[5,"SRGB_CAPABLE","",""],[5,"REFRESH_RATE","",""],[5,"CLIENT_API","",""],[5,"CONTEXT_VERSION_MAJOR","",""],[5,"CONTEXT_VERSION_MINOR","",""],[5,"CONTEXT_REVISION","",""],[5,"CONTEXT_ROBUSTNESS","",""],[5,"OPENGL_FORWARD_COMPAT","",""],[5,"OPENGL_DEBUG_CONTEXT","",""],[5,"OPENGL_PROFILE","",""],[5,"OPENGL_API","",""],[5,"OPENGL_ES_API","",""],[5,"NO_ROBUSTNESS","",""],[5,"NO_RESET_NOTIFICATION","",""],[5,"LOSE_CONTEXT_ON_RESET","",""],[5,"OPENGL_ANY_PROFILE","",""],[5,"OPENGL_CORE_PROFILE","",""],[5,"OPENGL_COMPAT_PROFILE","",""],[5,"CURSOR","",""],[5,"STICKY_KEYS","",""],[5,"STICKY_MOUSE_BUTTONS","",""],[5,"CURSOR_NORMAL","",""],[5,"CURSOR_HIDDEN","",""],[5,"CURSOR_DISABLED","",""],[5,"CONNECTED","",""],[5,"DISCONNECTED","",""],[4,"ErrorCallback","glfw","An error callback. This can be supplied with some user data to be passed to\nthe callback function when it is triggered."],[4,"GLProc","","An OpenGL process address."],[4,"MonitorCallback","","An monitor callback. This can be supplied with some user data to be passed\nto the callback function when it is triggered."],[4,"Scancode","",""],[5,"FAIL_ON_ERRORS","","A callback that triggers a task failure when an error is encountered."],[5,"LOG_ERRORS","","A callback that logs each error as it is encountered without triggering a\ntask failure."],[5,"Shift","",""],[5,"Control","",""],[5,"Alt","",""],[5,"Super","",""],[6,"Context","","Methods common to renderable contexts"],[9,"window_ptr","","Returns the pointer to the underlying `GLFWwindow`.",21],[10,"swap_buffers","","Swaps the front and back buffers of the window. If the swap interval is\ngreater than zero, the GPU driver waits the specified number of screen\nupdates before swapping the buffers.",21],[10,"is_current","","Returns `true` if the window is the current context.",21],[10,"make_current","","Wrapper for `glfwMakeContextCurrent`",21],[10,"fmt","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"hash","","",5],[10,"clone","","",5],[10,"fmt","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"fmt","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"hash","","",7],[10,"clone","","",7],[10,"fmt","","",22],[10,"fmt","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"hash","","",8],[10,"clone","","",8],[10,"fmt","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"hash","","",9],[10,"clone","","",9],[10,"clone","","",23],[10,"fmt","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"set_error_callback","","Sets the error callback, overwriting the previous one stored.",23],[10,"set_monitor_callback","","Sets the monitor callback, overwriting the previous one stored.",23],[10,"with_primary_monitor","","Supplies the primary monitor to the closure provided, if it exists.\nThis is usually the monitor where elements like the Windows task bar or\nthe OS X menu bar is located.",23],[10,"with_connected_monitors","","Supplies a vector of the currently connected monitors to the closure\nprovided.",23],[10,"window_hint","","This is used to set the window hints for the next call to\n`Glfw::create_window`. The hints can be reset to their default values\nusing calling the `Glfw::default_window_hints` function.",23],[10,"default_window_hints","","Resets the window hints previously set by the `window_hint` function to\ntheir default values.",23],[10,"create_window","","Creates a new window.",23],[10,"make_context_current","","Makes the context of the specified window current. If no window is given\nthen the current context is detached.",23],[10,"poll_events","","Immediately process the received events.",23],[10,"wait_events","","Sleep until at least one event has been recieved, and then perform the\nequivalent of `Glfw::poll_events`.",23],[10,"get_time","","Returns the current value of the GLFW timer. Unless the timer has been\nset using `glfw::set_time`, the timer measures time elapsed since GLFW\nwas initialized.",23],[10,"set_time","","Sets the value of the GLFW timer.",23],[10,"set_swap_interval","","Sets the number of screen updates to wait before swapping the buffers of\nthe current context and returning from `Window::swap_buffers`.",23],[10,"extension_supported","","Returns `true` if the specified OpenGL or context creation API extension\nis supported by the current context.",23],[10,"get_proc_address","","Returns the address of the specified client API or extension function\nif it is supported by the current context.",23],[10,"get_joystick","","Constructs a `Joystick` handle corresponding to the supplied `JoystickId`.",23],[10,"get_pos","","Wrapper for `glfwGetMonitorPos`.",24],[10,"get_physical_size","","Wrapper for `glfwGetMonitorPhysicalSize`.",24],[10,"get_name","","Wrapper for `glfwGetMonitorName`.",24],[10,"get_video_modes","","Wrapper for `glfwGetVideoModes`.",24],[10,"get_video_mode","","Wrapper for `glfwGetVideoMode`.",24],[10,"set_gamma","","Wrapper for `glfwSetGamma`.",24],[10,"get_gamma_ramp","","Wrapper for `glfwGetGammaRamp`.",24],[10,"set_gamma_ramp","","Wrapper for `glfwSetGammaRamp`.",24],[10,"fmt","","Returns a string representation of the video mode.",1],[10,"fmt","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"clone","","",13],[10,"fmt","","",14],[10,"eq","","",14],[10,"ne","","",14],[10,"clone","","",14],[10,"fmt","","",15],[10,"eq","","",15],[10,"ne","","",15],[10,"clone","","",15],[10,"hash","","",25],[10,"cmp","","",25],[10,"partial_cmp","","",25],[10,"lt","","",25],[10,"le","","",25],[10,"gt","","",25],[10,"ge","","",25],[10,"clone","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"empty","","Returns an empty set of flags.",25],[10,"all","","Returns the set containing all flags.",25],[10,"bits","","Returns the raw value of the flags currently stored.",25],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25],[10,"is_empty","","Returns `true` if no flags are currently stored.",25],[10,"is_all","","Returns `true` if all flags are currently set.",25],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25],[10,"insert","","Inserts the specified flags in-place.",25],[10,"remove","","Removes the specified flags in-place.",25],[10,"bitor","","Returns the union of the two sets of flags.",25],[10,"bitand","","Returns the intersection between the two sets of flags.",25],[10,"sub","","Returns the set difference of the two sets of flags.",25],[10,"not","","Returns the complement of this set of flags.",25],[10,"fmt","","",25],[10,"clone","","",17],[10,"fmt","","",17],[10,"next","","",26],[10,"create_shared","","Wrapper for `glfwCreateWindow`.",3],[10,"close","","Calling this method forces the destructor to be called, closing the\nwindow.",3],[10,"render_context","","Returns a render context that can be shared between tasks, allowing\nfor concurrent rendering.",3],[10,"should_close","","Wrapper for `glfwWindowShouldClose`.",3],[10,"set_should_close","","Wrapper for `glfwSetWindowShouldClose`.",3],[10,"set_title","","Sets the title of the window.",3],[10,"get_pos","","Wrapper for `glfwGetWindowPos`.",3],[10,"set_pos","","Wrapper for `glfwSetWindowPos`.",3],[10,"get_size","","Wrapper for `glfwGetWindowSize`.",3],[10,"set_size","","Wrapper for `glfwSetWindowSize`.",3],[10,"get_framebuffer_size","","Wrapper for `glfwGetFramebufferSize`.",3],[10,"iconify","","Wrapper for `glfwIconifyWindow`.",3],[10,"restore","","Wrapper for `glfwRestoreWindow`.",3],[10,"show","","Wrapper for `glfwShowWindow`.",3],[10,"hide","","Wrapper for `glfwHideWindow`.",3],[10,"with_window_mode","","Returns whether the window is fullscreen or windowed.",3],[10,"is_focused","","Wrapper for `glfwGetWindowAttrib` called with `FOCUSED`.",3],[10,"is_iconified","","Wrapper for `glfwGetWindowAttrib` called with `ICONIFIED`.",3],[10,"get_client_api","","Wrapper for `glfwGetWindowAttrib` called with `CLIENT_API`.",3],[10,"get_context_version","","Wrapper for `glfwGetWindowAttrib` called with\n`CONTEXT_VERSION_MAJOR`, `CONTEXT_VERSION_MINOR` and `CONTEXT_REVISION`.",3],[10,"get_context_robustness","","Wrapper for `glfwGetWindowAttrib` called with `CONTEXT_ROBUSTNESS`.",3],[10,"is_opengl_forward_compat","","Wrapper for `glfwGetWindowAttrib` called with `OPENGL_FORWARD_COMPAT`.",3],[10,"is_opengl_debug_context","","Wrapper for `glfwGetWindowAttrib` called with `OPENGL_DEBUG_CONTEXT`.",3],[10,"get_opengl_profile","","Wrapper for `glfwGetWindowAttrib` called with `OPENGL_PROFILE`.",3],[10,"is_resizable","","Wrapper for `glfwGetWindowAttrib` called with `RESIZABLE`.",3],[10,"is_visible","","Wrapper for `glfwGetWindowAttrib` called with `VISIBLE`.",3],[10,"is_decorated","","Wrapper for `glfwGetWindowAttrib` called with `DECORATED`.",3],[10,"set_pos_polling","","Wrapper for `glfwSetWindowPosCallback`.",3],[10,"set_all_polling","","",3],[10,"set_size_polling","","Wrapper for `glfwSetWindowSizeCallback`.",3],[10,"set_close_polling","","Wrapper for `glfwSetWindowCloseCallback`.",3],[10,"set_refresh_polling","","Wrapper for `glfwSetWindowRefreshCallback`.",3],[10,"set_focus_polling","","Wrapper for `glfwSetWindowFocusCallback`.",3],[10,"set_iconify_polling","","Wrapper for `glfwSetWindowIconifyCallback`.",3],[10,"set_framebuffer_size_polling","","Wrapper for `glfwSetFramebufferSizeCallback`.",3],[10,"get_cursor_mode","","Wrapper for `glfwGetInputMode` called with `CURSOR`.",3],[10,"set_cursor_mode","","Wrapper for `glfwSetInputMode` called with `CURSOR`.",3],[10,"has_sticky_keys","","Wrapper for `glfwGetInputMode` called with `STICKY_KEYS`.",3],[10,"set_sticky_keys","","Wrapper for `glfwSetInputMode` called with `STICKY_KEYS`.",3],[10,"has_sticky_mouse_buttons","","Wrapper for `glfwGetInputMode` called with `STICKY_MOUSE_BUTTONS`.",3],[10,"set_sticky_mouse_buttons","","Wrapper for `glfwSetInputMode` called with `STICKY_MOUSE_BUTTONS`.",3],[10,"get_key","","Wrapper for `glfwGetKey`.",3],[10,"get_mouse_button","","Wrapper for `glfwGetMouseButton`.",3],[10,"get_cursor_pos","","Wrapper for `glfwGetCursorPos`.",3],[10,"set_cursor_pos","","Wrapper for `glfwSetCursorPos`.",3],[10,"set_key_polling","","Wrapper for `glfwSetKeyCallback`.",3],[10,"set_char_polling","","Wrapper for `glfwSetCharCallback`.",3],[10,"set_mouse_button_polling","","Wrapper for `glfwSetMouseButtonCallback`.",3],[10,"set_cursor_pos_polling","","Wrapper for `glfwSetCursorPosCallback`.",3],[10,"set_cursor_enter_polling","","Wrapper for `glfwSetCursorEnterCallback`.",3],[10,"set_scroll_polling","","Wrapper for `glfwSetScrollCallback`.",3],[10,"set_clipboard_string","","Wrapper for `glfwGetClipboardString`.",3],[10,"get_clipboard_string","","Wrapper for `glfwGetClipboardString`.",3],[10,"get_cocoa_window","","Wrapper for `glfwGetCocoaWindow`",3],[10,"get_nsgl_context","","Wrapper for `glfwGetNSGLContext`",3],[10,"drop","","Closes the window and performs the necessary cleanups. This will block\nuntil all associated `RenderContext`s were also dropped, and emit a\n`debug!` message to that effect.",3],[10,"window_ptr","","",3],[10,"window_ptr","","",27],[10,"fmt","","",18],[10,"hash","","",18],[10,"eq","","",18],[10,"ne","","",18],[10,"clone","","",18],[10,"is_present","","Wrapper for `glfwJoystickPresent`.",4],[10,"get_axes","","Wrapper for `glfwGetJoystickAxes`.",4],[10,"get_buttons","","Wrapper for `glfwGetJoystickButtons`.",4],[10,"get_name","","Wrapper for `glfwGetJoystickName`.",4]],"paths":[[1,"Callback"],[1,"VidMode"],[1,"GammaRamp"],[1,"Window"],[1,"Joystick"],[2,"Action"],[2,"Key"],[2,"MouseButton"],[2,"Error"],[2,"CursorMode"],[2,"InitError"],[2,"MonitorEvent"],[2,"WindowHint"],[2,"ClientApi"],[2,"ContextRobustness"],[2,"OpenGlProfile"],[2,"WindowMode"],[2,"WindowEvent"],[2,"JoystickId"],[1,"GLFWgammaramp"],[1,"GLFWvidmode"],[6,"Context"],[1,"ShowAliases"],[1,"Glfw"],[1,"Monitor"],[1,"Modifiers"],[1,"FlushedMessages"],[1,"RenderContext"]]};
initSearch(searchIndex);
