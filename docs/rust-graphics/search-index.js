var searchIndex = {};
searchIndex['graphics'] = {"items":[[0,"","graphics","A library for 2D graphics that works with multiple back-ends."],[1,"Context","","Drawing 2d context."],[11,"view","","View transformation.",0],[11,"transform","","Current transformation.",0],[0,"internal","","Contains internal type aliases and traits."],[4,"Area","graphics::internal","The type used for area."],[4,"Color","","[red, green, blue, alpha]"],[4,"ColorComponent","","The type used for color component."],[4,"Line","","[x1, y1, x2, y2]"],[4,"Matrix2d","","[m00, m01, m02, m10, m11, m12]"],[4,"SourceRectangle","","[x, y, w, h]"],[4,"Polygon","","[x0, y0, x1, y1, ...]"],[4,"Polygons","","A slice of polygons."],[4,"Radius","","The type used for radius."],[4,"Ray","","[x, y, dir_x, dir_y]"],[4,"Rectangle","","[x, y, w, h]"],[4,"Triangle","","[x1, y1, x2, y2, x3, y3]"],[4,"Vec2d","","[x, y]"],[4,"Width","","The type used for width."],[6,"CanColor","","Implemented by contexts that can color."],[9,"color","","Create a new context with color.",1],[6,"CanRectangle","","Implemented by contexts that can set rectangle information."],[9,"rectangle","","Create new context with rectangle information.",2],[6,"CanSourceRectangle","","Implemented by contexts that can set source rectangle information."],[9,"source_rectangle","","Create new context with source rectangle information.",3],[6,"CanTransform","","Implemented by contexts that can transform."],[9,"transform","","Create a new context with transformation.",4],[6,"CanViewTransform","","Implemented by contexts that can view transform."],[9,"view_transform","","Create a new context with view transformation.",5],[6,"HasColor","","Implemented by contexts that uses type `U` as current color."],[9,"get_color","","Returns the current color.",6],[6,"HasRectangle","","Implemented by contexts that uses type `U` as current rectangle."],[9,"get_rectangle","","Returns the current rectangle.",7],[6,"HasSourceRectangle","","Implemented by contexts that uses type `U` as current source rectangle."],[9,"get_source_rectangle","","Returns the current source rectangle.",8],[6,"HasTransform","","Implemented by contexts that uses type `U` as current transform."],[9,"get_transform","","Returns the current transform.",9],[6,"HasViewTransform","","Implemented by contexts that uses type `U` as current view transform."],[9,"get_view_transform","","Returns the current view transform.",10],[0,"interpolation","graphics","Interpolation algorithms."],[3,"lerp","graphics::interpolation","Performs linear interpolation.\nA linear interpolation consists of two states 'a' and 'b'.\nThe 't' variable is a factor between 0 and 1 that \ngives weight to 'a' or 'b'.\nWhen 't' is zero then 'a' has full weight.\nWhen 't' is one then 'b' has full weight."],[3,"lerp_2","","Performs linear interpolation on array of size 3."],[3,"lerp_3","","Performs linear interpolation on array of size 3."],[3,"lerp_4","","Performs linear interpolation on array of size 4."],[3,"lerp_5","","Performs linear interpolation on array of size 5."],[3,"quad_bez","","Performs quadratic beziér interpolation.\nThis is done by nesting linear interpolations.\nFor more information, see:"],[3,"cub_bez","","Performs cubic beziér interpolation.\nThis is done by interpolation between two quadratic beziér.\nFor more information, see:"],[0,"modular_index","graphics","Helper functions for computing modular index safely."],[3,"offset","graphics::modular_index","Computes modular offset safely for indices."],[3,"previous","","Computes previous modular index safely."],[3,"next","","Computes next modular index safely."],[0,"triangulation","graphics","Methods for converting shapes into triangles."],[3,"with_lerp_polygons_tri_list_xy_f32_rgba_f32","graphics::triangulation","Streams tweened polygons using linear interpolation."],[3,"with_ellipse_tri_list_xy_f32_rgba_f32","","Streams an ellipse specified by a resolution."],[3,"with_round_border_line_tri_list_xy_f32_rgba_f32","","Streams a round border line."],[3,"with_round_rectangle_tri_list_xy_f32_rgba_f32","","Streams a round rectangle."],[3,"stream_polygon_tri_list_xy_f32_rgba_f32","","Streams a polygon into tri list with color per vertex.\nUses buffers that fit inside L1 cache."],[3,"with_ellipse_border_tri_list_xy_f32_rgba_f32","","Streams an ellipse border specified by a resolution."],[3,"with_round_rectangle_border_tri_list_xy_f32_rgba_f32","","Streams a round rectangle border."],[3,"stream_quad_tri_list_xy_f32_rgba_f32","","Streams a quad into tri list with color per vertex."],[3,"with_polygon_tri_list_xy_f32_rgba_f32","","Splits polygon into convex segments with one color per vertex.\nCreate a buffer that fits into L1 cache with 1KB overhead."],[3,"rect_tri_list_xy_f32","","Creates triangle list vertices from rectangle."],[3,"rect_border_tri_list_xy_f32","","Creates triangle list vertices from rectangle."],[3,"rect_tri_list_rgba_f32","","Creates triangle list colors from rectangle."],[3,"rect_border_tri_list_rgba_f32","","Creates triangle list colors from rectangle border."],[3,"rect_tri_list_uv_f32","","Creates triangle list texture coords from image."],[0,"vecmath","graphics","Various methods for computing with vectors."],[3,"translate","graphics::vecmath","Creates a translation matrix."],[3,"rotate_radians","","Creates a rotation matrix."],[3,"orient","","Orients x axis to look at point."],[3,"scale","","Create a scale matrix."],[3,"shear","","Create a shear matrix."],[3,"identity","","Create an identity matrix."],[3,"get_scale","","Extract scale information from matrix."],[3,"separation","","Compute the shortest vector from point to ray.\nA ray stores starting point and directional vector."],[3,"least_separation_4","","Returns the least separation out of four.\nEach seperation can be computed using `separation` function.\nThe separation returned can be used\nto solve collision of rectangles."],[3,"margin_rectangle","","Shrinks a rectangle by a factor on all sides."],[3,"relative_rectangle","","Computes a relative rectangle using the rectangle as a tile."],[3,"relative_source_rectangle","","Computes a relative source rectangle using\nthe source rectangle as a tile."],[3,"modular_offset","","Computes modular offset safely for numbers."],[3,"area_centroid","","Computes the area and centroid of a simple polygon."],[3,"area","","Computes area of a simple polygon."],[3,"centroid","","Computes centroid of a simple polygon."],[3,"line_side","","Returns a number that tells which side it is relative to a line."],[3,"inside_triangle","","Returns true if point is inside triangle."],[3,"triangle_face","","Returns true if triangle is clockwise."],[3,"hsv","","Transform color with hue saturation and value."],[4,"Scalar","","The type used for scalars."],[4,"Matrix2d","","The type used for matrices."],[4,"Vec2d","","The type used for vectors."],[3,"multiply","","Multiplies two matrices."],[4,"BevelBorderLineContext","graphics",""],[4,"BevelBorderLineColorContext","",""],[4,"BevelRectangleContext","",""],[4,"BevelRectangleColorContext","",""],[4,"BevelRectangleBorderContext","",""],[4,"BevelRectangleBorderColorContext","",""],[4,"ColorContext","",""],[4,"EllipseContext","",""],[4,"EllipseBorderContext","",""],[4,"EllipseColorContext","",""],[4,"EllipseBorderColorContext","",""],[4,"LerpTweenContext","",""],[4,"LerpTweenColorContext","",""],[4,"LerpTweenPolygonsContext","",""],[4,"LerpTweenPolygonsColorContext","",""],[4,"LineContext","",""],[4,"LineColorContext","",""],[4,"ImageContext","",""],[4,"ImageColorContext","",""],[4,"ImageRectangleContext","",""],[4,"ImageRectangleColorContext","",""],[4,"PolygonContext","",""],[4,"PolygonColorContext","",""],[4,"RectangleContext","",""],[4,"RectangleBorderContext","",""],[4,"RectangleColorContext","",""],[4,"RectangleBorderColorContext","",""],[4,"RoundBorderLineContext","",""],[4,"RoundBorderLineColorContext","",""],[4,"RoundRectangleContext","",""],[4,"RoundRectangleColorContext","",""],[4,"RoundRectangleBorderContext","",""],[4,"RoundRectangleBorderColorContext","",""],[4,"SquareBorderLineContext","",""],[4,"SquareBorderLineColorContext","",""],[6,"AddBevel","","Implemented by contexts that can make a shape bevel."],[9,"bevel","","Bevels the shape of the current context.",11],[6,"AddBevelBorder","","Implemented by contexts that can add round border."],[9,"bevel_border_radius","","Adds a bevel border radius.",12],[10,"bevel_border_width","","Adds a bevel border width.",12],[6,"AddBorder","","Implemented by contexts that can add border."],[9,"border_radius","","Adds a border radius.",13],[10,"border_width","","Adds a border width.",13],[6,"AddColor","","Implemented by contexts who can add color."],[9,"rgba","","Add color with alpha channel.",14],[10,"rgb","","Adds color with alpha channel set to 1.0.",14],[10,"color","","Add color [r, g, b, a].",14],[10,"grey","","Adds a gray color.",14],[10,"alpha","","Adds a white semi-transparent color.",14],[6,"AddEllipse","","Implemented by all contexts that can add ellipse."],[9,"ellipse","","Adds an ellipse.",15],[10,"ellipse_centered","","Adds an ellipse with coordinates in the center.",15],[10,"circle","","Adds a circle.",15],[6,"AddImage","","Implemented by contexts that can add image."],[9,"image","","Add image to context.",16],[6,"AddLine","","Implemented by all contexts that can add rectangle."],[9,"line","","Adds a line.",17],[6,"AddPolygon","","Implemented by contexts who can add polygon."],[9,"polygon","","Add polygon.",18],[6,"AddPolygons","","Implemented by tweening contexts that can add polygons."],[9,"polygons","","Add polygons.",19],[6,"AddRectangle","","Implemented by all contexts that can add rectangle."],[9,"rect","","Adds a rectangle.",20],[10,"rect_centered","","Adds a rectangle with coordinates in the center.",20],[10,"square","","Adds a square with coordinates of upper left corner.",20],[10,"square_centered","","Adds a square with coordinates in the center.",20],[6,"AddRound","","Implemented by contexts that can make a shape rounder."],[9,"round","","Rounds the shape of the current context.",21],[6,"AddRoundBorder","","Implemented by contexts that can add round border."],[9,"round_border_radius","","Adds a round border radius.",22],[10,"round_border_width","","Adds a round border width.",22],[6,"AddSquareBorder","","Implemented by contexts that can add square border."],[9,"square_border_radius","","Adds a square border radius.",23],[10,"square_border_width","","Adds a square border width.",23],[6,"AddTween","","Implemented by contexts who can give an animated inbetweening context."],[9,"lerp","","Do linear interpolation.",24],[6,"BackEnd","","Implemented by all graphics back-ends.\nThis trait uses default methods to simplify implementation."],[10,"supports_clear_rgba","","Returns true if feature is supported.",25],[10,"clear_rgba","","Clears background with a color.",25],[10,"enable_alpha_blend","","Turns on alpha blending.",25],[10,"disable_alpha_blend","","Turns off alpha blending.",25],[10,"supports_single_texture","","Returns true if texture feature is supported.",25],[10,"enable_single_texture","","Sets the current single-texture.",25],[10,"disable_single_texture","","Disables single-texture.",25],[10,"has_texture_alpha","","Should return true if texture has alpha channel.",25],[10,"supports_tri_list_xy_f64_rgba_f32","","Returns true if feature is supported.",25],[10,"tri_list_xy_f64_rgba_f32","","Renders list of 2d triangles with color assigned per vertex.",25],[10,"supports_tri_list_xy_f32_rgba_f32","","Returns true if feature is supported.",25],[10,"tri_list_xy_f32_rgba_f32","","Renders list of 2d triangles with color assigned per vertex.",25],[10,"supports_tri_list_xy_f32_rgba_f32_uv_f32","","Returns true if feature is supported.",25],[10,"tri_list_xy_f32_rgba_f32_uv_f32","","Renders list of 2d triangles.",25],[6,"Draw","","Implemented by contexts that can draws something using a back-end."],[9,"draw","","Draw using back-end.",26],[6,"ImageSize","","Must be implemented by all images to be used with graphics back-end."],[9,"get_size","","Get the image size.",27],[6,"RelativeColor","","Implemented by contexts that contains color."],[9,"mul_rgba","","Multiplies with red, green, blue and alpha values.",28],[10,"tint","","Mixes the current color with white.",28],[10,"shade","","Mixes the current color with black.",28],[10,"hue_deg","","Rotates hue by degrees.",28],[9,"hue_rad","","Rotates hue by radians.",28],[6,"RelativeRectangle","","Should be implemented by contexts that have rectangle information."],[9,"margin","","Shrinks the current rectangle equally by all sides.",29],[10,"expand","","Expands the current rectangle equally by all sides.",29],[9,"rel","","Moves to a relative rectangle using the current rectangle as tile.",29],[6,"RelativeSourceRectangle","","Should be implemented by contexts that\nhave source rectangle information."],[9,"src_rect","","Adds a source rectangle.",30],[9,"src_rel","","Moves to a relative source rectangle using\nthe current source rectangle as tile.",30],[9,"src_flip_h","","Flips the source rectangle horizontally.",30],[9,"src_flip_v","","Flips the source rectangle vertically.",30],[9,"src_flip_hv","","Flips the source rectangle horizontally and vertically.",30],[6,"RelativeTransform2d","","Implemented by contexts that can transform."],[9,"trans","","Translate x an y in local coordinates.",31],[10,"rot_deg","","Rotates degrees in local coordinates.",31],[9,"rot_rad","","Rotate radians in local coordinates.",31],[9,"orient","","Orients x axis to look at point locally.",31],[9,"scale","","Scales in local coordinates.",31],[10,"zoom","","Scales in both directions in local coordinates.",31],[10,"flip_v","","Flips vertically in local coordinates.",31],[10,"flip_h","","Flips horizontally in local coordinates.",31],[10,"flip_hv","","Flips horizontally and vertically in local coordinates.",31],[9,"shear","","Shears in local coordinates.",31],[6,"View","","Should be implemented by contexts that\ndraws something relative to view."],[9,"view","","Moves the current transform to the view coordinate system.",32],[9,"reset","","Moves the current transform to the default coordinate system.",32],[9,"store_view","","Stores the current transform as new view.",32],[9,"get_view_size","","Computes the current view size.",32]],"paths":[[1,"Context"],[6,"CanColor"],[6,"CanRectangle"],[6,"CanSourceRectangle"],[6,"CanTransform"],[6,"CanViewTransform"],[6,"HasColor"],[6,"HasRectangle"],[6,"HasSourceRectangle"],[6,"HasTransform"],[6,"HasViewTransform"],[6,"AddBevel"],[6,"AddBevelBorder"],[6,"AddBorder"],[6,"AddColor"],[6,"AddEllipse"],[6,"AddImage"],[6,"AddLine"],[6,"AddPolygon"],[6,"AddPolygons"],[6,"AddRectangle"],[6,"AddRound"],[6,"AddRoundBorder"],[6,"AddSquareBorder"],[6,"AddTween"],[6,"BackEnd"],[6,"Draw"],[6,"ImageSize"],[6,"RelativeColor"],[6,"RelativeRectangle"],[6,"RelativeSourceRectangle"],[6,"RelativeTransform2d"],[6,"View"]]};
initSearch(searchIndex);
