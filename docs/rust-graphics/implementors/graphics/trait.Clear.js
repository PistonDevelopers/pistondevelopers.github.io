(function() {var implementors = {};
implementors['graphics'] = ["impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.BevelBorderLineColorContext.html' title='graphics::BevelBorderLineColorContext'>BevelBorderLineColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.BevelRectangleColorContext.html' title='graphics::BevelRectangleColorContext'>BevelRectangleColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.ColorContext.html' title='graphics::ColorContext'>ColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.EllipseColorContext.html' title='graphics::EllipseColorContext'>EllipseColorContext</a>&lt;'a&gt;","impl&lt;'a, 'b, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.ImageRectangleColorContext.html' title='graphics::ImageRectangleColorContext'>ImageRectangleColorContext</a>&lt;'a, 'b, I&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.LineColorContext.html' title='graphics::LineColorContext'>LineColorContext</a>&lt;'a&gt;","impl&lt;'a, 'b, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.PolygonColorContext.html' title='graphics::PolygonColorContext'>PolygonColorContext</a>&lt;'a, 'b&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.RectangleColorContext.html' title='graphics::RectangleColorContext'>RectangleColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.RoundBorderLineColorContext.html' title='graphics::RoundBorderLineColorContext'>RoundBorderLineColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.RoundRectangleColorContext.html' title='graphics::RoundRectangleColorContext'>RoundRectangleColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.SquareBorderLineColorContext.html' title='graphics::SquareBorderLineColorContext'>SquareBorderLineColorContext</a>&lt;'a&gt;","impl&lt;'a, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.LerpTweenColorContext.html' title='graphics::LerpTweenColorContext'>LerpTweenColorContext</a>&lt;'a&gt;","impl&lt;'a, 'b, B: <a class='trait' href='graphics/trait.BackEnd.html' title='graphics::BackEnd'>BackEnd</a>&lt;I&gt;, I: <a class='trait' href='graphics/trait.Image.html' title='graphics::Image'>Image</a>&gt; <a class='trait' href='graphics/trait.Clear.html' title='graphics::Clear'>Clear</a>&lt;B, I&gt; for <a class='struct' href='graphics/struct.LerpTweenPolygonsColorContext.html' title='graphics::LerpTweenPolygonsColorContext'>LerpTweenPolygonsColorContext</a>&lt;'a, 'b&gt;",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
