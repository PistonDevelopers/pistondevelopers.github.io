var searchIndex = {};
searchIndex['image'] = {"items":[[0,"","image",""],[1,"JPEGDecoder","","The representation of a JPEG decoder"],[11,"r","","",0],[11,"qtables","","",0],[11,"dctables","","",0],[11,"actables","","",0],[11,"h","","",0],[11,"height","","",0],[11,"width","","",0],[11,"num_components","","",0],[11,"scan_components","","",0],[11,"components","","",0],[11,"mcu_row","","",0],[11,"mcu","","",0],[11,"hmax","","",0],[11,"vmax","","",0],[11,"interval","","",0],[11,"mcucount","","",0],[11,"expected_rst","","",0],[11,"row_count","","",0],[11,"decoded_rows","","",0],[11,"padded_width","","",0],[11,"state","","",0],[1,"JPEGEncoder","","The representation of a JPEG encoder"],[11,"w","","",1],[11,"components","","",1],[11,"tables","","",1],[11,"accumulator","","",1],[11,"nbits","","",1],[11,"luma_dctable","","",1],[11,"luma_actable","","",1],[11,"chroma_dctable","","",1],[11,"chroma_actable","","",1],[1,"PNGDecoder","","The representation of a PNG decoder"],[11,"z","","",2],[11,"crc","","",2],[11,"previous","","",2],[11,"state","","",2],[11,"width","","",2],[11,"height","","",2],[11,"bit_depth","","",2],[11,"colour_type","","",2],[11,"pixel_type","","",2],[11,"palette","","",2],[11,"interlace_method","","",2],[11,"chunk_length","","",2],[11,"chunk_type","","",2],[11,"bpp","","",2],[11,"rlength","","",2],[11,"decoded_rows","","",2],[1,"PNGEncoder","","The representation of a PNG encoder"],[11,"w","","",3],[11,"crc","","",3],[1,"GIFDecoder","","The Representation of a GIF decoder"],[11,"r","","",4],[11,"width","","",4],[11,"height","","",4],[11,"global_table","","",4],[11,"local_table","","",4],[11,"delay","","",4],[11,"image","","",4],[11,"global_backgroud_index","","",4],[11,"local_transparent_index","","",4],[11,"have_header","","",4],[11,"decoded_rows","","",4],[1,"WebpDecoder","",""],[11,"r","","",5],[11,"frame","","",5],[11,"have_frame","","",5],[11,"decoded_rows","","",5],[2,"ImageError","","An enumeration of Image Errors"],[12,"FormatError","","The Image is not formatted properly",6],[12,"DimensionError","","The Image's dimensions are either too small or too large",6],[12,"UnsupportedError","","The Decoder does not support this image format",6],[12,"UnsupportedColor","","The Decoder does not support this color type",6],[12,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",6],[12,"IoError","","An I/O Error occurred while decoding the image",6],[12,"ImageEnd","","The end of the image has been reached",6],[0,"vp8","","An implementation of the VP8 Video Codec"],[1,"Frame","image::vp8","A Representation of the last decoded video frame"],[11,"width","","The width of the luma plane",7],[11,"height","","The height of the luma plane",7],[11,"ybuf","","The luma plane of the frame",7],[11,"keyframe","","Indicates whether this frame is a keyframe",7],[11,"version","","",7],[11,"for_display","","Indicates whether this frame is intended for display",7],[11,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",7],[11,"filter","","",7],[11,"filter_level","","",7],[11,"sharpness_level","","",7],[1,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes"],[11,"r","","",8],[11,"b","","",8],[11,"mbwidth","","",8],[11,"mbheight","","",8],[11,"frame","","",8],[11,"segments_enabled","","",8],[11,"segments_update_map","","",8],[11,"segment","","",8],[11,"partitions","","",8],[11,"num_partitions","","",8],[11,"segment_tree_probs","","",8],[11,"token_probs","","",8],[11,"prob_intra","","",8],[11,"prob_skip_false","","",8],[11,"top","","",8],[11,"left","","",8],[11,"top_border","","",8],[11,"left_border","","",8],[10,"clone","","",7],[10,"fmt","","",7],[10,"default","","",7],[10,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",8],[10,"decode_frame","","Decodes the current frame and returns a reference to it",8],[0,"colortype","image","Types and methods for representing and manipulating colors"],[2,"ColorType","image::colortype","An enumeration over supported color types and their bit depths"],[12,"Grey","","Pixel is greyscale",9],[12,"RGB","","Pixel contains R, G and B channels",9],[12,"Palette","","Pixel is an index into a color palette",9],[12,"GreyA","","Pixel is greyscale with an alpha channel",9],[12,"RGBA","","Pixel is RGB with an alpha channel",9],[3,"bits_per_pixel","","Returns the number of bits contained in a pixel of ColorType c"],[3,"num_components","","Returns the number of color channels that make up this pixel"],[10,"fmt","","",9],[10,"eq","","",9],[10,"ne","","",9],[0,"jpeg","image","Decoding and Encoding of JPEG Images"],[1,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder"],[11,"r","","",0],[11,"qtables","","",0],[11,"dctables","","",0],[11,"actables","","",0],[11,"h","","",0],[11,"height","","",0],[11,"width","","",0],[11,"num_components","","",0],[11,"scan_components","","",0],[11,"components","","",0],[11,"mcu_row","","",0],[11,"mcu","","",0],[11,"hmax","","",0],[11,"vmax","","",0],[11,"interval","","",0],[11,"mcucount","","",0],[11,"expected_rst","","",0],[11,"row_count","","",0],[11,"decoded_rows","","",0],[11,"padded_width","","",0],[11,"state","","",0],[1,"JPEGEncoder","","The representation of a JPEG encoder"],[11,"w","","",1],[11,"components","","",1],[11,"tables","","",1],[11,"accumulator","","",1],[11,"nbits","","",1],[11,"luma_dctable","","",1],[11,"luma_actable","","",1],[11,"chroma_dctable","","",1],[11,"chroma_actable","","",1],[1,"Component","","A representation of a JPEG component"],[11,"id","","The Component's identifier",10],[11,"h","","Horizontal sampling factor",10],[11,"v","","Vertical sampling factor",10],[11,"tq","","The quantization table selector",10],[11,"dc_table","","Index to the Huffman DC Table",10],[11,"ac_table","","Index to the AC Huffman Table",10],[11,"dc_pred","","The dc prediction of the component",10],[3,"derive_codes_and_sizes","",""],[5,"UNZIGZAG","",""],[10,"clone","","",10],[0,"png","image","Decoding and Encoding of PNG Images"],[1,"PNGDecoder","image::png","The representation of a PNG decoder"],[11,"z","","",2],[11,"crc","","",2],[11,"previous","","",2],[11,"state","","",2],[11,"width","","",2],[11,"height","","",2],[11,"bit_depth","","",2],[11,"colour_type","","",2],[11,"pixel_type","","",2],[11,"palette","","",2],[11,"interlace_method","","",2],[11,"chunk_length","","",2],[11,"chunk_type","","",2],[11,"bpp","","",2],[11,"rlength","","",2],[11,"decoded_rows","","",2],[1,"PNGEncoder","","The representation of a PNG encoder"],[11,"w","","",3],[11,"crc","","",3],[5,"PNGSIGNATURE","",""],[0,"gif","image","Decoding of GIF Images"],[1,"GIFDecoder","image::gif","The Representation of a GIF decoder"],[11,"r","","",4],[11,"width","","",4],[11,"height","","",4],[11,"global_table","","",4],[11,"local_table","","",4],[11,"delay","","",4],[11,"image","","",4],[11,"global_backgroud_index","","",4],[11,"local_transparent_index","","",4],[11,"have_header","","",4],[11,"decoded_rows","","",4],[0,"webp","image","Decoding of Webp Images"],[1,"WebpDecoder","image::webp",""],[11,"r","","",5],[11,"frame","","",5],[11,"have_frame","","",5],[11,"decoded_rows","","",5],[0,"ppm","image","Encoding of PPM Images"],[1,"PPMEncoder","image::ppm",""],[11,"w","","",11],[10,"new","","",11],[10,"encode","","",11],[4,"ImageResult","image",""],[6,"ImageDecoder","","The trait that all decoders implement"],[9,"dimensions","","Return a tuple containing the width and height of the image",12],[9,"colortype","","Return the color type of the image e.g RGB(8) (8bit RGB)",12],[9,"row_len","","Returns the length in bytes of one decoded row of the image",12],[9,"read_scanline","","Read one row from the image into buf\nReturns the row index",12],[9,"read_image","","Decode the entire image and return it as a Vector",12],[10,"load_rect","","Decode a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",12]],"paths":[[1,"JPEGDecoder"],[1,"JPEGEncoder"],[1,"PNGDecoder"],[1,"PNGEncoder"],[1,"GIFDecoder"],[1,"WebpDecoder"],[2,"ImageError"],[1,"Frame"],[1,"VP8Decoder"],[2,"ColorType"],[1,"Component"],[1,"PPMEncoder"],[6,"ImageDecoder"]]};
initSearch(searchIndex);
